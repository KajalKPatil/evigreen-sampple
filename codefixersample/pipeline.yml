name: EviGreen

on:
 push:
   branches: [ master ]
 pull_request:
   branches: [ master ]
 workflow_dispatch:
 
permissions:
  contents: write

jobs:
 Build:

   runs-on: self-hosted
   environment: test
   
   steps:
   - uses: actions/checkout@v2
   - name: Set up JDK 17
     uses: actions/setup-java@v1
     with:
       java-version: 17
   - name: Set up Maven
     uses: stCarolas/setup-maven@v4.5
     with:
        maven-version: 3.9.6
   - name: run MVN clean install 
     run: mvn clean install -DskipTests
     #run: sudo mvn clean install

 #Unit-Testing:
  #needs: Build
  #runs-on: self-hosted
  #environment: test
  
  #steps:
  #- name: scan
    #run: sleep 5s
    
 Static-Scan:
   needs: Build
   runs-on: self-hosted
   environment: test
   
   steps:
   - name: Build and analyze
     # run: sleep 1s
     # env:
        # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
     run: mvn clean verify -DskipTests sonar:sonar "-Dsonar.projectKey=evigreen-baseapp" "-Dsonar.projectName=evigreen-baseapp" "-Dsonar.host.url=http://localhost:9002" "-Dsonar.token=sqp_e7fde24d4ef9025be944c1ef440fb4f72d767f30" 
   #- name: Scanning is in progress
   #  run: sleep 15s
   #- name: after sleep 15s
   #  run: sleep 1s    
      # Add while loop here
    # Add while loop here using PowerShell
   - name: Loop with while
     shell: powershell
     run: |
        # Remove the existing directory and create a new one
        Remove-Item -Path "latest-sonar-report" -Recurse -Force
        mkdir latest-sonar-report
    
        # Download the SonarQube report
        $url = "http://localhost:9002/api/issues/search?componentKeys=evigreen-baseapp&types=CODE_SMELL&ps=500&tags=green&statuses=OPEN&additionalFields=rules"
        $outputFile = "latest-sonar-report/sonar-code-smell-report.json"
    
        try {
             # Use Invoke-RestMethod to fetch the report
             $response = Invoke-RestMethod -Uri $url -Headers @{Authorization=("Basic {0}" -f [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("${{ secrets.SYNTBOTSORCH_SONAR_TOKEN }}:")))} 
             
             # Save the response to a file
             $response | ConvertTo-Json | Set-Content -Path $outputFile
     
             # Check if the file was successfully downloaded
             if (Test-Path $outputFile) {
                 Write-Host "SonarQube report downloaded successfully."
             } else {
                 Write-Error "Failed to download the SonarQube report."
             }
        } 
        catch 
        {
            Write-Error "An error occurred during the HTTP request: $_"
        }
        #curl -X POST "http://localhost:9000/push-data-to-opensearch/" -H "accept: application/json"
        # curl -u "${{ secrets.SYNTBOTSORCH_SONAR_TOKEN }}:" "http://localhost:3210/api/issues/search?componentKeys=MO4D-baseapp&resolved=false&types=CODE_SMELL&ps=500" -o latest-sonar-report/sonar-code-smell-report.json
        # curl -u "${{ secrets.SYNTBOTSORCH_SONAR_TOKEN }}:" "http://localhost:3210/api/issues/search?componentKeys=MO4D-baseapp&resolved=false&types=BUG&ps=500" -o latest-sonar-report/sonar-bug-report.json
        # curl -u "${{ secrets.SYNTBOTSORCH_SONAR_TOKEN }}:" "http://localhost:3210/api/issues/search?componentKeys=MO4D-baseapp&resolved=false&types=VULNERABILITY&ps=500" -o latest-sonar-report/sonar-vulnerability-report.json
      #  sonar | curl -u "${{ secrets.SONAR_TOKEN }}:" "http://localhost:3210/api/hotspots/search?projectKey=MO4D-baseapp&ps=500"  -o latest-sonar-report/sonar-security-hotspot-report.json

 #Vulnerability-Scan:
   #needs: Build
   #runs-on: self-hosted
   #environment: test
   
   #steps:
   #- name: install Snyk CLI and check Vulnerabilities
     #run: sleep 1s
   # - name: install Snyk CLI
   #   run: sudo npm install -g snyk
   # - name: Synk authentication
   #   run: sudo snyk auth ${{ secrets.SNYK_TOKEN }} 
   # - name: run Snyk Open Source monitor
   #   run: sudo snyk monitor #> Test-Report.txt
   # - name: Install the Snyk JSON to HTML Mapper using npm
   #   run: sudo npm install snyk-to-html -g # Install the Snyk JSON to HTML Mapper using npm
   # - name:  create a files results-code.html for Snyk code
   #   run: |
   #    sudo snyk test --json | snyk-to-html -o results-code.html

    
# Integration-Testing:
#   needs: [Unit-Testing, Static-Scan, Vulnerability-Scan]
#   runs-on: self-hosted
#   environment: test
    
 #  steps:
 #   - name: test
 #     run: sleep 10s
     
     
# Deploy:
 #  needs: Integration-Testing
 #  runs-on: self-hosted
 #  environment: test
    
  # steps:
  # - name: authenticate
  #   run: gcloud auth login --cred-file=/home/aiops-dev/somekey.json
  # - name: deploy
  #   run: sudo gcloud builds submit --config=./cloudbuild.yaml
 
 Cleanup:
   needs: [Static-Scan]
   runs-on: self-hosted
   environment: test
   steps:
   - name: Set up Git user
     run: |
        Remove-Item -Path "node_modules" -Recurse -Force
        Remove-Item -Path "target" -Recurse -Force
        git config --global user.name "Gayatri Khedekar"
        git config --global user.email "gayatri.khedekar@atos.net"
        
   - name: git commit 
     run: |
       git add .
       git commit -m "Test Recort of Snyk Scanning"
       # git remote set-url origin https://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@github.com/IN-ATOS-AARA/baseapp.git
       # git remote set-url origin https://${{ secrets.TOKEN_GITHUB}}@github.com/IN-ATOS-AARA/baseapp.git
       git push 
   # - name: cleanup
   #   run: Remove-Item -Path "C:\CarbonFootPrint\codes_for_scan\github-actions-runner\actions-runner\_work\deliveryone-baseapp" -Recurse -Force
